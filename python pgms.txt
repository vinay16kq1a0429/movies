def parsePlayer(pList):
    scBats = []
    nsBats = []
    for each in pList:
        eList = each.split(':')
        if eList[1] in ('', '0'):
            nsBats.append(eList[0] + '~NR')
        else:
            scBats.append(eList[0] + ':' + eList[2])
    scBats.sort(key=lambda x: int(x.split(',')[1]), reverse=True)
    return (scBats + nsBats)


......................................................
fact of num using function:
def fact(num):
    fact1=1 
    while(num>1):
        fact1=fact1*num
        num=num-1
    return fact1 

print(fact(6)) 

.................if num is prime return true or false 
def prime(num):
    count=0
    for i in (2,num-1):
        if(num%i==0):
            count=count+1
            break 
    return count

res = prime(10)
if(res==1):
    print("false")
else:
    print("true")

..................sum of each digit in num:
def sum(num):
    sum1=0
    while(num>0):
        t=num%10
        sum1=sum1+t
        num=num//10
    return sum1
res=sum(567)
print(res)

...............print largest among three numbers:
l=int(input())
m=int(input())
n=int(input())
if(l>m and l>n):
    print("l is greater")
elif(m>n and m>l):
    print("m is greater")
else:
    print("n is greater")

......................fibonacci series....
def fib(n):
    a=0
    b=1 
    print(a,sep=",")
    print(b,sep=",")
    for i in range(0,n-2):
        c=a+b 
        a=b 
        b=c 
        print(c,sep=",")
num = int(input())
fib(num)

...........asignment...............
def cal_salary(sal,level):
    upsal=0
    if(level==3):
        upsal=sal+sal*15/100
    elif(level==4):
        upsal=sal+sal*15/100    
    elif(level==5):
        upsal=sal+sal*15/100
    else:
        sal=sal 
    return upsal 
print(cal_salary(15000,4))
.................................sqrt.......................
def sqrt(num):
    res=0
    res=num**2
    return res
var=int(input())
print(sqrt(var))
.............................palimdrome.........................
def is_palindrom(num):
    sum=0
    n=num
    while(n>0):
        d=n%10
        sum=sum+d 
        sum=sum*10
        n=n//10
    if(sum//10==num):
        print("palindrome")
    else:
        print("notpalindrome") 
va1=int(input())
.......................perfect....................................
def c_a_n(num):
    sum=0
    for i in range(1,num):
        if(num%i==0):
            sum=sum+i
    if(sum==num):
        print("perfect")

va1=int(input())
c_a_n(va1)
..................amicable....................................
def c_a_n(num1,num2):
    sum1=0
    sum2=0
    for i in range(1,num1):
        if(num1%i==0):
            sum1=sum1+i
    for i in range(1,num2):
        if(num2%i==0):
            sum2=sum2+i
    if((sum1==num2)and(sum2==num1)):
        print("perfect")

va1=int(input())
.....................right shift.............................
def right_shift(num,n):
    res=num>>n 
    return res

va1=int(input())
va2=int(input())
r=right_shift(va1,va2)
print(r)
..................strong num...........................
def pef_num(num1):
    num=num1
    sum=0
    while(num>0):
        z=num%10
        fact=1 
        while(z>0):
            fact=fact*z 
            z=z-1
        sum=sum+fact 
        num=num//10 
    if(num1==sum):
        print("perfect")
        
va1=int(input())
pef_num(va1)
...............................list excersize........
def pef_num(list1):
    count=0
    for i in range(0,len(list1)-1):
        if(list1[i]==list1[i+1]):
            count=count+1
    return count
   
        
va1=[10,10,12,13,13,0,0]
count=pef_num(va1)
print(count)
..............................
Write a Python function proper_divisors(num) which returns a list of all the proper divisors of given number.
def prop_div(num):
    list1=[]
    for i in range(1,num):
        if(num%i==0):
            list1.append(i)
    return list1
var1=int(input())
lis2=prop_div(var1)
print(lis2)
.............................................
Write a Python function generate_fibanacci(n) to return a list of first n Fibonacci numbers.
def prop_div(num):
    list1=[]
    a,b=0,1
    list1.append(a)
    list1.append(b)
    for i in range(2,num):
        c=a+b
        a=b 
        b=c 
        list1.append(c)
    return list1
var1=int(input())
lis2=prop_div(var1)
......................................................
Write a Python program to generate the next 15 leap years starting from a given year. Populate the leap years into a list and display the list.
def prop_div(num):
    list1=[]
    while(len(list1)<=15):
        if(num%400==0):
            list1.append(num)
        elif(num%100==0):
            pass
        elif(num%4==0):
            list1.append(num)
        num+=1 
    return list1
            
var1=int(input())
...........................................................
Given a string containing uppercase characters (A-Z), compress the string using Run Length encoding. Repetition of character has to be replaced by storing the length of that run.

Write a python function encode(message)  which performs the run length encoding for a given String and returns the run length encoded String.

Provide different String values and test your program.

Example: message=AAAABBBBCCCCCCCC  output: 4A4B8C

string = "vvvvttttun"
l=len(string)
str1=""
for i in range(0,l):
    for j in range(0,l):
        
        if(string[i]==string[j]):
            if(i==j):
                c=0
                for k in range(j,len(string)):
                    if(string[j]==string[k]):
                        c=c+1 
                str1+=str(c)
                str1+=string[j] 
            else:
                break
print(str1)
''''''''''''''''''''''
2nd solution


string = "AAAABBBBCCCCCCCC"
l=len(string)
str1=""
str2=""
for i in string:
    if(i in str1):
        continue
    else:
        str1+=i 
for i in range(0,len(str1)):
    c=0
    for j in range(0,len(string)):
        if(str1[i]==string[j]):
            c+=1
    str2+=str(c)
    str2+=str1[i]
print(str2)
........................................................................
Represent a small bilingual (English-Swedish) glossary given below as a Python dictionary

{"merry":"god", "christmas":"jul", "and":"och", "happy":"gott", "new":"nytt", "year":"ar"} 

and use it to translate your Christmas wishes from English into Swedish.

That is, write a Python function translate(b_dict,list_words) that accepts the bilingual dictionary and a list of English words (your Christmas wish) and returns a list of equivalent Swedish words. 
def translate(b_dict,list1):
    list2=[]
    for i in list1:
        list2.append(b_dict[i])
    return list2
dict={"merry":"god", "christmas":"jul", "and":"och", "happy":"gott", "new":"nytt", "year":"ar"}
list1=["merry","christmas"]
list2=translate(dict,list1)
print(list2)
            
..............................................................................
Write a python function, encrypt_sentence(msg) which accepts a message and encrypts it based on rules given below and returns the encrypted message.
 

Words at odd position -> Reverse It

Words at even position -> Rearrange the characters so that all consonants appear before the vowels and their order should not change

Note: Assume that the sentence would begin with a word and there will be only a single space between the words.

          Perform case sensitive string operations wherever necessary.

Example: msg=the sun rises in the east    output=eht snu sesir ni eht stea



string1 = "my name is vinay"
list1=string1.split(" ")
str1=""
str2=""
for i in range(0,len(list1)):
    if(i%2==0):
        list1[i]=list1[i][len(list1[i])-1::-1]
        str2+=list1[i]
    else:
        for j in range(0,len(list1[i])):
            if(list1[i][j]!="a" and list1[i][j]!="e" and list1[i][j]!="i" and list1[i][j]!="o" and list1[i][j]!="u"):
                str1+=list1[i][j]
                continue
        for k in range(0,len(list1[i])):
            if(list1[i][k]=="a" or list1[i][k]=="e" or list1[i][k]=="i" or list1[i][k]=="o" or list1[i][k]=="u"):
                str1+=list1[i][k] 
        str2+=" "
        str1+=" "
        str2+=str1
print(str1)
print(str2)
............................................................................................

Write a Python program to find the numbers of words present in the given sentence


string1 = "my name is vinay"
list1=string1.split(" ")
print(len(list1))
.................................................................................................
Write a Python program to find the number of characters present the given string

strin1=str(input())
l=len(strin)
print(l)
......................................................................................................
Write a Python function words_count(sentence) to return a dictionary with the length of words as key and number words with such length as value.

Example: sentence=“I love python and it so easy to learn” sample output={1:1,4:2,5:1,3:1,2:3,6:1} 
string1="i love python here i am doing that"

list1=string1.split()
list2=[]
a_dict1={}
list3=[]
print(list1)
for i in range(0,len(list1)):
    list2.append(len(list1[i]))
print(list2)
for i in range(0,len(list2)):
    c=0
    for j in range(0,len(list2)):
        if(list2[i]==list2[j]):
            c+=1
    list3.append(c)
print(list3)
for i in range(0,len(list3)):
    for j in range(0,len(list2)):
        if(i==j):
            a_dict1[list2[i]]=list3[j] 
print(str(a_dict1))

...........................................................................................................
Write a Python function vowel_count(sentence) to return a dictionary with vowels, consonants, others as key and respective number of vowels, consonants, others characters as value.

Note: Do case insensitive operations

Example: sentence=“I love python and it so easy to learn”

                 sample output={“vowels”:12,”consonants”:17, “others”:8}
srt1="my name is vinay"
c=0
d=0
e=0
for i in range(0,len(srt1)):
    if(srt1[i]!="a" and srt1[i]!="e" and srt1[i]!="i" and srt1[i]!="o" and srt1[i]!="u" and srt1[i]!=" "):
        c=c+1 
    elif(srt1[i]=="a" or srt1[i]=="e" or srt1[i]=="i" or srt1[i]=="o" or srt1[i]=="u"):
        d=d+1 
    else:
        e+=1 
print("numberof vowels:",c, "no of consonents:",d ,"others:",e)
.......................................................................................................................

                                       file handling
fhr=open("data.txt","r")
list_var=fhr.readlines()
for line in list_var:
    print(line,end="") 
fhr.close()
................................................................
#paste the copied code or type your code here
def calculate_sum(list_of_expenditure):
    total=0
    no_values=len(list_of_expenditure)
    try:
        for expenditure in list_of_expenditure:
            total+=expenditure
        print("Total:",total)
        avg=total/no_values
        print("Average:",avg)
        #print(list_of_expenditure[5])
    except ZeroDivisionError:
        print("Divide by Zero error")
    except TypeError:
        print("Wrong data type")
    finally:
        print("End of function")
try:
    list_of_values=[100,200,300,400,500]
    num_values=len(list_of_values)
    calculate_sum(list_of_values)
except NameError:
    print("Name error occured")
except:
    print("Some error occured")
finally:
    print("End of main call")
....................................................................................................
Write a python function, find_pairs_of_numbers(num_list,n) which accepts a list of positive integers with no repetitions and returns count of pairs of numbers in the list that adds up to n. The function should return 0, if no such pairs are found in the list.

Example: num_list=[1, 2, 7, 4, 5, 6, 0, 3], n=6 output:3

              num_list= [3, 4, 1, 8, 5, 9, 0, 6], n=9 output:4

list1=[1, 2, 7, 4, 5, 6, 0, 3]
n=6
c=0
for i in range(0,len(list1)):
    for j in range(i+1,len(list1)):
        if(list1[i]+list1[j] == n):
            c=c+1 
print(c)
..................................................................
def check_prime(list1):
    c=0
    list2=[]
    l=len(list1)
    for i in range(0,l):
        m=list1[i]
        d=0
        for j in range(2,m):
            if(list1[i]%j==0):
                d=d+1
        if(d==0):
            list2.append(list1[i])
    print(list2)
list3=[7,9,11,13,15,20,23]
check_prime(list3)
                ...............................................................

 str1="I like Python"
str2="Java is a very popular language"
str3=""
l=len(str1)
m=len(str2)
for i in range(0,l):
    if(str1[i]==" "):
        continue
    for j in range(0,m):
        if(str1[i]==str2[j]):
            str3+=str1[i]
        elif(str1[i].upper()==str2[j]):
            str3+=str1[i]
        elif(str1[i].lower()==str2[j]):
            str3+=str1[i] 
print(str3)
n=len(str3)
str4=""
for i in str3:
    if(i in str4):
        pass
    else:
        str4=str4+i
print(str4)
        
        
        
 ..............................................................................................................
to count the digits in a string;
string1="ka-1142ka"
sum=0
for i in range(0,len(string1)):
    if(string1[i].isnumeric()):
        sum+=int(string1[i])
print(sum)
......................................................................................................................




